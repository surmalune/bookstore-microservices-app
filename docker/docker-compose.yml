version: '3.9'

services:
  elasticsearch:
    image: elasticsearch:8.8.1
    container_name: elasticsearch
    environment:
      - "ES_JAVA_OPTS=-Xmx256m -Xms256m"
      - xpack.security.enabled=false
    volumes:
      - ./elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 50

  logstash:
    image: logstash:8.8.1
    container_name: logstash
    environment:
      XPACK_MONITORING_ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      XPACK_MONITORING_ENABLED: "true"
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    volumes:
      - ./elk/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./elk/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: kibana:8.8.1
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    ports:
      - "5601:5601"
    networks:
      - netbookstore
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      KEYCLOAK_DB_USER: keycloak
      KEYCLOAK_DB_NAME: keycloakdb
      KEYCLOAK_DB_PASSWORD: password
      CATALOG_DB_USER: catalog
      CATALOG_DB_PASSWORD: password
      CATALOG_DB_NAME: catalogdb
      CART_DB_USER: cart
      CART_DB_PASSWORD: password
      CART_DB_NAME: cartdb
      PGDATA: /var/lib/postgresql/data/
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloakdb
      DB_USER: keycloak
      DB_PASSWORD: password
      DB_SCHEMA: public
      KC_HEALTH_ENABLED: true
    volumes:
      - ./keycloak/bookstore-auth-realm.json:/opt/keycloak/data/import/bookstore-auth-realm.json
    command: [ "start-dev", "--import-realm" ]
    ports:
      - "8080:8080"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health/ready" ]
      interval: 30s
      timeout: 10s
      retries: 50
    depends_on:
      postgres:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - netbookstore
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      - zookeeper

  discovery:
    build: ../discovery-service
    container_name: discovery
    ports:
      - "8761:8761"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://root:s3cr3t@localhost:8761/actuator/health" ]
      interval: 20s
      timeout: 10s
      retries: 10
    depends_on:
      logstash:
        condition: service_healthy

  config:
    build: ../config-service
    container_name: config
    ports:
      - "8888:8888"
    networks:
      - netbookstore
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 50
    depends_on:
      logstash:
        condition: service_healthy
      discovery:
        condition: service_healthy

  gateway:
    build: ../gateway-service
    container_name: gateway
    ports:
      - "8000:8000"
    networks:
      - netbookstore
    restart: on-failure
    depends_on:
      keycloak:
        condition: service_healthy
      logstash:
        condition: service_healthy
      discovery:
        condition: service_healthy
      config:
        condition: service_healthy

  catalog:
    build: ../catalog-service
    container_name: catalog
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: catalogdb
      DB_USER: catalog
      DB_PASSWORD: password
    expose:
      - "8081"
    networks:
      - netbookstore
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      logstash:
        condition: service_healthy
      discovery:
        condition: service_healthy
      config:
        condition: service_healthy
      kafka:
        condition: service_healthy

  cart:
    build: ../cart-service
    container_name: cart
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: cartdb
      DB_USER: cart
      DB_PASSWORD: password
    expose:
      - "8082"
    networks:
      - netbookstore
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
      logstash:
        condition: service_healthy
      discovery:
        condition: service_healthy
      config:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local

networks:
  netbookstore:
    driver: bridge